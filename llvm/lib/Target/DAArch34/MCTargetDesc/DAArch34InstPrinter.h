#ifndef LLVM_LIB_TARGET_DAARCH34_MCTARGETDESC_DAARCH34INSTPRINTER_H
#define LLVM_LIB_TARGET_DAARCH34_MCTARGETDESC_DAARCH34INSTPRINTER_H

#include <cstdint>
#include <utility>

#include "llvm/ADT/StringRef.h"
#include "llvm/MC/MCInstPrinter.h"
#include "llvm/MC/MCRegister.h"

namespace llvm {

class raw_ostream;

class MCAsmInfo;
class MCInstrInfo;
class MCRegisterInfo;
class MCSubtargetInfo;

class DAArch34InstrPrinter : public MCInstPrinter {
public:
  DAArch34InstrPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII,
                       const MCRegisterInfo &MRI)
      : MCInstPrinter(MAI, MII, MRI) {}

  /// Returns a pair containing the mnemonic for \p MI and the number of bits
  /// left for further processing by printInstruction (generated by tablegen).
  std::pair<const char *, uint64_t> getMnemonic(const MCInst *MI) override {
    return std::pair<const char *, uint64_t>{nullptr, 0};
  }

  /// Print the assembler register name.
  void printRegName(raw_ostream &O, MCRegister Reg) const override {}

  /// Print the specified MCInst to the specified raw_ostream.
  ///
  /// \p Address the address of current instruction on most targets, used to
  /// print a PC relative immediate as the target address. On targets where a PC
  /// relative immediate is relative to the next instruction and the length of a
  /// MCInst is difficult to measure (e.g. x86), this is the address of the next
  /// instruction. If Address is 0, the immediate will be printed.
  void printInst(const MCInst *MI, uint64_t Address, StringRef Annot,
                 const MCSubtargetInfo &STI, raw_ostream &O) override {}
};

} // end namespace llvm

#endif // LLVM_LIB_TARGET_DAARCH34_MCTARGETDESC_DAARCH34INSTPRINTER_H
